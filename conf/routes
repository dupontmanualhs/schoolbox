# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


# Common
GET		/									@controllers.App.index()
GET		/stub								@controllers.App.stub()

# WebJar assets
GET		/webjars/*file						controllers.WebJarAssets.at(file)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               		controllers.Assets.at(path="/public", file)

#Users
-> /users				users.Routes

#Courses
-> /courses				courses.Routes

#Assignments
GET     /assignments/doTask/:taskId             @controllers.Assignments.doTask(taskId: Long)
POST    /assignments/check/:taskId              @controllers.Assignments.check(taskId: Long)

#Math
GET     /tatro/mastery                          @controllers.Mastery.menuOfTests()     
GET 	/tatro/mastery/quiz/:quizId				@controllers.Mastery.displayQuiz(quizId: Long)
POST	/tatro/mastery/quiz/:quizId				@controllers.Mastery.gradeQuiz(quizId: Long)
GET		/tatro/mastery/test						@controllers.Mastery.testDataBase()  
GET     /tatro/mastery/scoreReport				@controllers.Mastery.checkAnswers()
#GET     /math/random                            @controllers.Math.randomProblem()
#POST    /math/random                            @controllers.Math.checkAnswer(temp)

#Blogs
GET     /blog/editor                            @controllers.Blogs.editor()
POST    /blog/editor                            @controllers.Blogs.testSubmit()
GET     /blog/me                                @controllers.Blogs.listCurrentUserBlogs
GET     /blog/user/:id                          @controllers.Blogs.listBlogsByRoleId(id: Long)
GET     /blog/:id                               @controllers.Blogs.showBlog(id: Long)
# GET     /blog/:id/new                           @controllers.Blogs.createPost(id: Long)
# POST    /blog/:id/new                           @controllers.Blogs.createPostP(id: Long)

#Books
GET     /books/addTitle                         @controllers.Books.addTitle()
POST    /books/addTitle                         @controllers.Books.addTitleP()
GET     /books/findCopyHistory                  @controllers.Books.findCopyHistory()
POST    /books/findCopyHistory                  @controllers.Books.findCopyHistoryP()
GET     /books/findCurrentCheckouts             @controllers.Books.findCurrentCheckouts()
POST    /books/findCurrentCheckouts             @controllers.Books.findCurrentCheckoutsP()
GET     /books/copyHistory/:barcode             @controllers.Books.copyHistory(barcode: String)
GET     /books/currentCheckouts/:studentId      @controllers.Books.currentCheckouts(studentId: String)
GET     /books/checkoutHistory/:studentId       @controllers.Books.checkoutHistory(studentId: String)
GET     /books/findCheckoutHistory              @controllers.Books.findCheckoutHistory()
POST    /books/findCheckoutHistory              @controllers.Books.findCheckoutHistoryP()
GET     /books/checkout                         @controllers.Books.checkout()
POST    /books/checkout                         @controllers.Books.checkoutP()
GET     /books/checkIn                          @controllers.Books.checkIn()
POST    /books/checkIn                          @controllers.Books.checkInP()
GET     /books/allBooksOut/:grade               @controllers.Books.allBooksOut(grade: Int)
GET     /books/findAllBooksOut                  @controllers.Books.findAllBooksOut()
POST    /books/findAllBooksOut                  @controllers.Books.findAllBooksOutP()
GET     /books/addPurchaseGroup                 @controllers.Books.addPurchaseGroup()
POST    /books/addPurchaseGroup                 @controllers.Books.addPurchaseGroupP()
GET     /books/copyInfo/:barcode                @controllers.Books.copyInfo(barcode: String)
GET     /books/findCopyInfo                     @controllers.Books.findCopyInfo()
POST    /books/findCopyInfo                     @controllers.Books.findCopyInfoP()
GET     /books/copyStatusByTitle/:isbn          @controllers.Books.copyStatusByTitle(isbn: String)
GET     /books/findCopyStatusByTitle            @controllers.Books.findCopyStatusByTitle()
POST    /books/findCopyStatusByTitle            @controllers.Books.findCopyStatusByTitleP()
GET     /books/inventory                        @controllers.Books.inventory
GET     /books/checkoutBulk                     @controllers.Books.checkoutBulk()
POST    /books/checkoutBulk                     @controllers.Books.checkoutBulkP()
GET     /books/checkoutBulkHelper/:stu          @controllers.Books.checkoutBulkHelper(stu: String)
POST    /books/checkoutBulkHelper/:stu          @controllers.Books.checkoutBulkHelperP(stu: String)
GET     /books/removeCopyFromList/:stu/:bc      @controllers.Books.removeCopyFromList(stu: String, bc: String)
GET     /books/removeAllCopiesFromList/:stu     @controllers.Books.removeAllCopiesFromList(stu: String)
GET     /books/cancelBulkCheckout               @controllers.Books.cancelBulkCheckout()
GET     /books/checkoutBulkSubmit/:stu          @controllers.Books.checkoutBulkSubmit(stu: String)
GET     /books/editTitleHelper/:isbn            @controllers.Books.editTitleHelper(isbn: String)
POST    /books/editTitleHelper/:isbn            @controllers.Books.editTitleHelperP(isbn: String)
GET     /books/editTitle                        @controllers.Books.editTitle()
POST    /books/editTitle                        @controllers.Books.editTitleP()
GET     /books/addTitleToPrintQueue/:isbn/:cR   @controllers.Books.addTitleToPrintQueue(isbn: String, cR: String)
GET     /books/addTitleToPrintQueueHelper       @controllers.Books.addTitleToPrintQueueHelper()
POST    /books/addTitleToPrintQueueHelper       @controllers.Books.addTitleToPrintQueueHelperP()
GET     /books/viewPrintQueue                   @controllers.Books.viewPrintQueue()
POST    /books/viewPrintQueue                   @controllers.Books.viewPrintQueueP()
GET     /books/deleteCopy                       @controllers.Books.deleteCopy()
POST    /books/deleteCopy                       @controllers.Books.deleteCopyP()
GET     /books/deleteTitle                      @controllers.Books.deleteTitle()
POST    /books/deleteTitle                      @controllers.Books.deleteTitleP()
GET     /books/checkInBulk                      @controllers.Books.checkInBulk()
POST    /books/checkInBulk                      @controllers.Books.checkInBulkP()
GET     /books/printSingleSection               @controllers.Books.printSingleSection()
POST    /books/printSingleSection               @controllers.Books.printSingleSectionP()
GET     /books/displaySectionPdf                @controllers.Books.displaySectionPdf()
GET     /books/printSectionsByDept              @controllers.Books.printSectionsByDept()
POST    /books/printSectionsByDept              @controllers.Books.printSectionsByDeptP()
GET     /books/printAllSections                 @controllers.Books.printAllSections()
GET     /books/reportCopyLost/:barcode          @controllers.Books.reportCopyLost(barcode: String)
GET     /books/quickCheckoutHelper/:sId/:bcode  @controllers.Books.quickCheckoutHelper(sId: String, bcode: String)
GET     /books/quickCheckout                    @controllers.Books.quickCheckout()

#Lockers
GET     /lockers/myLocker                       @controllers.Lockers.getMyLocker()
GET     /lockers/byNumber/:num             		@controllers.Lockers.getLocker(num: Int)
POST    /lockers/claim/:num						@controllers.Lockers.claimLocker(num: Int)
GET     /lockers/byNumber                 @controllers.Lockers.lockerByNumber()
POST    /lockers/byNumber                 @controllers.Lockers.lockerByNumberP()
GET     /lockers/search                   @controllers.Lockers.lockerSearch()
POST    /lockers/search                   @controllers.Lockers.lockerSearchP()
GET     /lockers/schedule                       @controllers.Lockers.schedule()
GET     /lockers/byRoom/:room             @controllers.Lockers.lockerByRoom(room: String)

# TODO
#Payment
#GET		/payment								@controllers.Payment.payForm()
#POST	/payment								@controllers.Payment.payForm()


#Conferences
GET		/conferences												@controllers.Conferences.listEvents()
GET		/conferences/teacher/:eventId								@controllers.Conferences.eventForTeacher(eventId: Long)
GET		/conferences/reserveSlot/:teacherActivationId/:startTime	@controllers.Conferences.reserveSlot(teacherActivationId: Long, startTime: Int)
POST	/conferences/reserveSlot/:teacherActivationId/:startTime	@controllers.Conferences.reserveSlotP(teacherActivationId: Long, startTime: Int)
GET		/conferences/addEvent									    @controllers.Conferences.addEvent()
POST	/conferences/addEvent									    @controllers.Conferences.addEventP()
GET		/conferences/addSession/:eventId							@controllers.Conferences.addSession(eventId: Long)
POST	/conferences/addSession/:eventId							@controllers.Conferences.addSessionP(eventId: Long)
#GET	/conferences/createSlot/:sessionId/:studentId/:teacherId		@controllers.Conferences.createSlot(sessionId: Long, studentId: Long, teacherId: Long)
#POST	/conferences/createSlot/:sessionId/:studentId/:teacherId		@controllers.Conferences.createSlotP(sessionId: Long, studentId: Long, teacherId: Long)
GET		/conferences/deleteEvent/:eventId							@controllers.Conferences.deleteEvent(eventId: Long)
GET		/conferences/deleteSession/:sessionId						@controllers.Conferences.deleteSession(sessionId: Long)
GET		/conferences/deleteSlot/:slotId								@controllers.Conferences.deleteSlot(slotId: Long)
GET		/conferences/teacherView									@controllers.Conferences.teacherView()
#GET		/conferences/deactivateTeacherSession/:sessionId			@controllers.Conferences.deactivateTeacherSession(sessionId: Long)
GET		/conferences/enablePriorityScheduling/:studentId			@controllers.Conferences.enablePriority(studentId: Long)
GET		/conferences/disablePriorityScheduling/:studentId			@controllers.Conferences.disablePriority(studentId: Long)
GET		/conferences/classList/:sessionId							@controllers.Conferences.classList(sessionId: Long)
GET		/conferences/multipleTeacherHandler/:sessionId/:sectionId	@controllers.Conferences.multipleTeacherHandler(sessionId: Long, sectionId: Long)
GET		/conferences/slotHandler/:sessionId/:teacherId				@controllers.Conferences.slotHandler(sessionId: Long, teacherId: Long)
GET 	/conferences/guardianRegister/:sessionId/:teacherId/:studentId		@controllers.Conferences.guardianSlotScheduler(sessionId: Long, teacherId: String, studentId: String)
POST 	/conferences/guardianRegister/:sessionId/:teacherId/:studentId      @controllers.Conferences.guardianSlotSchedulerP(sessionId: Long, teacherId: String, studentId: String)
GET		/conferences/studentClasses/:sessionId/:studentId			@controllers.Conferences.studentClasses(sessionId: Long, studentId: String)
GET    /conferences/activateTeacher/:sessionId/:teacherId			@controllers.Conferences.activateTeacher(sessionId: Long, teacherId: Long)
GET		/conferences/myConferences/:sessionId						@controllers.Conferences.myConferences(sessionId: Long)
#POST    /conferences/scheduleBreak									@controllers.Conferences.scheduleBreak()

#Grades
GET     /grades/home/:id						@controllers.Grades.home(id: Long)
GET     /grades/announcements/:sectionId	    	    @controllers.Grades.announcements(sectionId: Long)
GET     /grades/assignments/:sectionId	    	    	@controllers.Grades.assignments(sectionId: Long)
# GET     /grades/assignments/deleteAssignment/:id/:assignmentId    @controllers.Grades.deleteAssignment(id: Long, assignmentId: Long)
GET     /grades/gradebook/:id					@controllers.Grades.gradebook(id: Long)
