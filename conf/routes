# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# WebJar assets
GET		/webjars/*file				controllers.WebJarAssets.at(file)

# Home page
GET     /                           controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Stub 
GET     /stub						controllers.Application.stub()

#Books
GET     /addTitle                         controllers.Books.addTitle()
POST    /addTitle                         controllers.Books.addTitleP()
GET     /findCopyHistory                  controllers.Books.findCopyHistory()
POST    /findCopyHistory                  controllers.Books.findCopyHistoryP()
GET     /findCurrentCheckouts             controllers.Books.findCurrentCheckouts()
POST    /findCurrentCheckouts             controllers.Books.findCurrentCheckoutsP()
GET     /copyHistory/:barcode             controllers.Books.copyHistory(barcode: String)
GET     /currentCheckouts/:studentId      controllers.Books.currentCheckouts(studentId: String)
GET     /checkoutHistory/:studentId       controllers.Books.checkoutHistory(studentId: String)
GET     /findCheckoutHistory              controllers.Books.findCheckoutHistory()
POST    /findCheckoutHistory              controllers.Books.findCheckoutHistoryP()
GET     /checkout                         controllers.Books.checkout()
POST    /checkout                         controllers.Books.checkoutP()
GET     /checkIn                          controllers.Books.checkIn()
POST    /checkIn                          controllers.Books.checkInP()
GET     /allBooksOut/:grade               controllers.Books.allBooksOut(grade: Int)
GET     /findAllBooksOut                  controllers.Books.findAllBooksOut()
POST    /findAllBooksOut                  controllers.Books.findAllBooksOutP()
GET     /addPurchaseGroup                 controllers.Books.addPurchaseGroup()
POST    /addPurchaseGroup                 controllers.Books.addPurchaseGroupP()
GET     /copyInfo/:barcode                controllers.Books.copyInfo(barcode: String)
GET     /findCopyInfo                     controllers.Books.findCopyInfo()
POST    /findCopyInfo                     controllers.Books.findCopyInfoP()
GET     /copyStatusByTitle/:isbn          controllers.Books.copyStatusByTitle(isbn: String)
GET     /findCopyStatusByTitle            controllers.Books.findCopyStatusByTitle()
POST    /findCopyStatusByTitle            controllers.Books.findCopyStatusByTitleP()
GET     /inventory                        controllers.Books.inventory
GET     /checkoutBulk                     controllers.Books.checkoutBulk()
POST    /checkoutBulk                     controllers.Books.checkoutBulkP()
GET     /checkoutBulkHelper/:stu          controllers.Books.checkoutBulkHelper(stu: String)
POST    /checkoutBulkHelper/:stu          controllers.Books.checkoutBulkHelperP(stu: String)
GET     /removeCopyFromList/:stu/:bc      controllers.Books.removeCopyFromList(stu: String, bc: String)
GET     /removeAllCopiesFromList/:stu     controllers.Books.removeAllCopiesFromList(stu: String)
GET     /cancelBulkCheckout               controllers.Books.cancelBulkCheckout()
GET     /checkoutBulkSubmit/:stu          controllers.Books.checkoutBulkSubmit(stu: String)
GET     /editTitleHelper/:isbn            controllers.Books.editTitleHelper(isbn: String)
POST    /editTitleHelper/:isbn            controllers.Books.editTitleHelperP(isbn: String)
GET     /editTitle                        controllers.Books.editTitle()
POST    /editTitle                        controllers.Books.editTitleP()
GET     /addTitleToPrintQueue/:isbn/:cR   controllers.Books.addTitleToPrintQueue(isbn: String, cR: String)
GET     /addTitleToPrintQueueHelper       controllers.Books.addTitleToPrintQueueHelper()
POST    /addTitleToPrintQueueHelper       controllers.Books.addTitleToPrintQueueHelperP()
GET     /viewPrintQueue                   controllers.Books.viewPrintQueue
GET     /removeFromPrintQueue/:id         controllers.Books.removeFromPrintQueue(id: Long)
GET     /printEntireQueue                 controllers.Books.printEntireQueue
GET     /deleteCopyHelper                 controllers.Books.deleteCopyHelper()
POST    /deleteCopyHelper                 controllers.Books.deleteCopyHelperP()
GET     /deleteCopy/:barcode              controllers.Books.deleteCopy(barcode: String)
GET     /deleteTitleHelper                controllers.Books.deleteTitleHelper()
POST    /deleteTitleHelper                controllers.Books.deleteTitleHelperP()
GET     /deleteTitle/:isbn                controllers.Books.deleteTitle(isbn: String)

#form example
GET		/this/is/spartas/formtest				controllers.Application.formTest()
POST	/this/is/spartas/formtest				controllers.Application.formTestP()

#Users
GET		/login						            controllers.Users.login()
POST    /login						          	controllers.Users.loginP()
GET     /chooseRole          		  			controllers.Users.chooseRole()
POST    /chooseRole         					controllers.Users.chooseRoleP() 
GET     /logout                     			controllers.Users.logout()
GET     /settings                  				controllers.Users.settings()
POST    /changeTheme   			                controllers.Users.changeTheme()
POST    /changePassword             			controllers.Users.changePassword()
GET     /listUsers                 				controllers.Users.list()


#Courses
# current schedules
GET         /schedule/teacher/:username             controllers.Courses.getTeacherSchedule1(username)
GET     /schedule/student/:username             controllers.Courses.getStudentSchedule1(username)
GET     /schedule/mySchedule                                    controllers.Courses.getMySchedule()
# schedules for given term
GET     /schedule/teacher/:termSlug/:username   controllers.Courses.getTeacherSchedule2(username, termSlug)
GET     /schedule/student/:termSlug/:username   controllers.Courses.getStudentSchedule2(username, termSlug)
# section classes
GET             /classes                                                                controllers.Courses.classList()
GET             /classes/:courseId                                              controllers.Courses.sectionTable(courseId: Long)
# section roster
GET     /roster/:sectionId                      controllers.Courses.roster(sectionId: Long)

#Assessments
GET     /assessments                            controllers.Assessments.menu()
POST    /assessments                            controllers.Assessments.checkAnswer(temp: Int)
GET     /assessments/newQuestion                controllers.Assessments.newQuestion()

#Assignments
GET     /assignments/doTask/:taskId             controllers.Assignments.doTask(taskId: Long)
POST    /assignments/check/:taskId              controllers.Assignments.check(taskId: Long)

#Math
GET     /tatro/mastery                          controllers.Mastery.menuOfTests()     
GET 	/tatro/mastery/quiz/:quizId				controllers.Mastery.displayQuiz(quizId: Long)
POST	/tatro/mastery/quiz/:quizId				controllers.Mastery.gradeQuiz(quizId: Long)
GET		/tatro/mastery/test						controllers.Mastery.testDataBase()  
GET     /tatro/mastery/scoreReport				controllers.Mastery.checkAnswers()
#GET     /math/random                            controllers.Math.randomProblem()
#POST    /math/random                            controllers.Math.checkAnswer(temp)

#Blogs
GET     /blog/editor                            controllers.Blogs.editor()
POST    /blog/editor                            controllers.Blogs.testSubmit()
GET     /blog/me                                controllers.Blogs.listCurrentUserBlogs
GET     /blog/user/:id                          controllers.Blogs.listBlogsByRoleId(id: Long)
GET     /blog/:id                               controllers.Blogs.showBlog(id: Long)
# GET     /blog/:id/new                           controllers.Blogs.createPost(id: Long)
# POST    /blog/:id/new                           controllers.Blogs.createPostP(id: Long)

#Lockers
GET     /lockers/myLocker                       controllers.Lockers.getMyLocker()
GET     /lockers/byNumber/:num             		controllers.Lockers.getLocker(num: Int)
POST    /lockers/claim/:num						controllers.Lockers.claimLocker(num: Int)
GET     /lockers/byNumber                 controllers.Lockers.lockerByNumber()
POST    /lockers/byNumber                 controllers.Lockers.lockerByNumberP()
GET     /lockers/search                   controllers.Lockers.lockerSearch()
POST    /lockers/search                   controllers.Lockers.lockerSearchP()
GET     /lockers/schedule                       controllers.Lockers.schedule()
GET     /lockers/byRoom/:room             controllers.Lockers.lockerByRoom(room: String)

# TODO
#Payment
#GET		/payment								controllers.Payment.payForm()
#POST	/payment								controllers.Payment.payForm()


#Conferences
GET		/conferences							controllers.Conferences.index()
GET		/conferences/teacher 					controllers.Conferences.viewAsTeacher()
GET		/conferences/createEvent				controllers.Conferences.createEvent()
POST	/conferences/createEvent				controllers.Conferences.createEventP()
GET		/conferences/createSession/:eventId				controllers.Conferences.createSession(eventId: Long)
POST	/conferences/createSession/:eventId				controllers.Conferences.createSessionP(eventId: Long)
GET		/conferences/createSlot/:sessionId/:teacherId		controllers.Conferences.createSlot(sessionId: Long, teacherId: Long)
POST	/conferences/createSlot/:sessionId/:teacherId					controllers.Conferences.createSlotP(sessionId: Long, teacherId: Long)
GET		/conferences/deleteEvent/:eventId				controllers.Conferences.deleteEvent(eventId: Long)
GET		/conferences/deleteSession/:sessionId			controllers.Conferences.deleteSession(sessionId: Long)
GET		/conferences/deleteSlot/:slotId					controllers.Conferences.deleteSlot(slotId: Long)
GET		/conferences/teacherView						controllers.Conferences.teacherView()
GET		/conferences/teacherSession/:sessionId			controllers.Conferences.teacherSession(sessionId: Long)
GET		/conferences/activateSession/:sessionId			controllers.Conferences.activateTeacherSession(sessionId: Long)
POST	/conferences/activateSession/:sessionId			controllers.Conferences.activateTeacherSessionP(sessionId: Long)
GET		/conferences/deactivateTeacherSession/:sessionId	controllers.Conferences.deactivateTeacherSession(sessionId: Long)
GET		/conferences/classList/:sessionId		controllers.Conferences.classList(sessionId: Long)
GET		/conferences/multipleTeacherHandler/:sessionId/:sectionId	controllers.Conferences.multipleTeacherHandler(sessionId: Long, sectionId: Long)
GET		/conferences/slotHandler/:sessionId/:teacherId				controllers.Conferences.slotHandler(sessionId: Long, teacherId: Long)

#Grades
GET     /grades/home/:id						controllers.Grades.home(id: Long)
GET     /grades/announcements/:sectionId	    	    controllers.Grades.announcements(sectionId: Long)
GET     /grades/assignments/:sectionId	    	    	controllers.Grades.assignments(sectionId: Long)
# GET     /grades/assignments/deleteAssignment/:id/:assignmentId    controllers.Grades.deleteAssignment(id: Long, assignmentId: Long)
GET     /grades/gradebook/:id					controllers.Grades.gradebook(id: Long)
